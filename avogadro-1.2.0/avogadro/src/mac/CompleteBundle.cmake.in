#-- Need this for link line stuff?
if(COMMAND cmake_policy)
  cmake_policy(SET CMP0009 NEW)
endif(COMMAND cmake_policy)

set(OSX_App "Avogadro.app")

# gp_item_default_embedded_path item default_embedded_path_var
#
# Return the path that others should refer to the item by when the item
# is embedded inside a bundle.
#
# Override on a per-project basis by providing a project-specific
# gp_item_default_embedded_path_override function.
#
function(gp_item_default_embedded_path_override item default_embedded_path_var)
  #
  # The assumption here is that all executables in the bundle will be
  # in same-level-directories inside the bundle. The parent directory
  # of an executable inside the bundle should be MacOS or a sibling of
  # MacOS and all embedded paths returned from here will begin with
  # "@loader_path/../" and will work from all executables in all
  # such same-level-directories inside the bundle.
  #

  # By default, embed things right next to the main bundle executable:
  #
  set(install_name_prefix "@executable_path")
  # -------------------------------------------------------------------
  # If your application uses plugins then you should consider using the following
  #  instead but will limit your deployment to OS X 10.4. There is also a patch
  #  needed for CMake that as of Sept 30, 2008 has NOT been applied to CMake.
  #  set (install_name_prefix "@loader_path")

  set(path "${install_name_prefix}/../MacOS")

  set(overridden 0)

  # Embed .dylibs in the Libraries Directory
  #
  if(item MATCHES "\\.dylib$")
    # Don't override the Qt plugins
    if(NOT item MATCHES "libq[a-zA-Z0-9]*\\.dylib$|libphonon_qt7.dylib$")
      set(path "${install_name_prefix}/../lib")
      set(overridden 1)
    endif(NOT item MATCHES "libq[a-zA-Z0-9]*\\.dylib$|libphonon_qt7.dylib$")
    # Now for the various Qt plugins - I think this is very hackish...
    if(item MATCHES "plugins/accessible/[a-zA-Z]*\\.dylib$")
      set(path "${install_name_prefix}/../plugins/accessible")
      set(overridden 1)
    endif(item MATCHES "plugins/accessible/[a-zA-Z]*\\.dylib$")
    if(item MATCHES "plugins/bearer/[a-zA-Z]*\\.dylib$")
      set(path "${install_name_prefix}/../plugins/bearer")
      set(overridden 1)
    endif(item MATCHES "plugins/bearer/[a-zA-Z]*\\.dylib$")
    if(item MATCHES "plugins/designer/[a-zA-Z]*\\.dylib$")
      set(path "${install_name_prefix}/../plugins/designer")
      set(overridden 1)
    endif(item MATCHES "plugins/designer/[a-zA-Z]*\\.dylib$")
    if(item MATCHES "plugins/codecs/[a-zA-Z]*\\.dylib$")
      set(path "${install_name_prefix}/../plugins/codecs")
      set(overridden 1)
    endif(item MATCHES "plugins/codecs/[a-zA-Z]*\\.dylib$")
    if(item MATCHES "plugins/graphicssystems/[a-zA-Z]*\\.dylib$")
      set(path "${install_name_prefix}/../plugins/graphicssystems")
      set(overridden 1)
    endif(item MATCHES "plugins/graphicssystems/[a-zA-Z]*\\.dylib$")
    if(item MATCHES "plugins/iconengines/[a-zA-Z]*\\.dylib$")
      set(path "${install_name_prefix}/../plugins/iconengines")
      set(overridden 1)
    endif(item MATCHES "plugins/iconengines/[a-zA-Z]*\\.dylib$")
    if(item MATCHES "plugins/imageformats/[a-zA-Z]*\\.dylib$")
      set(path "${install_name_prefix}/../plugins/imageformats")
      set(overridden 1)
    endif(item MATCHES "plugins/imageformats/[a-zA-Z]*\\.dylib$")
    if(item MATCHES "plugins/mediaservices/[a-zA-Z]*\\.dylib$")
      set(path "${install_name_prefix}/../plugins/mediaservices")
      set(overridden 1)
    endif(item MATCHES "plugins/mediaservices/[a-zA-Z]*\\.dylib$")
    if(item MATCHES "plugins/phonon_backend/[a-zA-Z]*\\.dylib$")
      set(path "${install_name_prefix}/../plugins/phonon_backend")
      set(overridden 1)
    endif(item MATCHES "plugins/phonon_backend/[a-zA-Z]*\\.dylib$")
    if(item MATCHES "plugins/script/[a-zA-Z]*\\.dylib$")
      set(path "${install_name_prefix}/../plugins/script")
      set(overridden 1)
    endif(item MATCHES "plugins/script/[a-zA-Z]*\\.dylib$")
    if(item MATCHES "plugins/sqldrivers/[a-zA-Z]*\\.dylib$")
      set(path "${install_name_prefix}/../plugins/sqldrivers")
      set(overridden 1)
    endif(item MATCHES "plugins/sqldrivers/[a-zA-Z]*\\.dylib$")
  endif(item MATCHES "\\.dylib$")

  # Embed .so plugin files in their directories
  #
  if(item MATCHES "tool\\.so$")
    set(path "${install_name_prefix}/../lib/avogadro/tools")
    set(overridden 1)
  endif(item MATCHES "tool\\.so$")
  if(item MATCHES "engine\\.so$")
    set(path "${install_name_prefix}/../lib/avogadro/engines")
    set(overridden 1)
  endif(item MATCHES "engine\\.so$")
  if(item MATCHES "extension\\.so$")
    set(path "${install_name_prefix}/../lib/avogadro/extensions")
    set(overridden 1)
  endif(item MATCHES "extension\\.so$")
  if(item MATCHES "color\\.so$")
    set(path "${install_name_prefix}/../lib/avogadro/colors")
    set(overridden 1)
  endif(item MATCHES "color\\.so$")

  if(item MATCHES "format\\.so$")
    set(path "${install_name_prefix}/../lib/openbabel")
    set(overridden 1)
  endif(item MATCHES "format\\.so$")
  if(item MATCHES "Interface\\.so$")
    set(path "${install_name_prefix}/../lib/openbabel")
    set(overridden 1)
  endif(item MATCHES "Interface\\.so$")
  if(item MATCHES "chemdrawcdx.so$|chemdrawct.so$|molreport.so$|pubchem.so")
    set(path "${install_name_prefix}/../lib/openbabel")
    set(overridden 1)
  endif(item MATCHES "chemdrawcdx.so$|chemdrawct.so$|molreport.so$|pubchem.so")

  # Embed frameworks in the embedded "Frameworks" directory (sibling of MacOS):
  #
  if(NOT overridden)
    if(item MATCHES "[^/]+\\.framework/")
      set(path "${install_name_prefix}/../Frameworks")
      set(overridden 1)
    endif(item MATCHES "[^/]+\\.framework/")
  endif(NOT overridden)

  message(STATUS "Item: ${item}, new path ${path}")
  set(${default_embedded_path_var} "${path}" PARENT_SCOPE)
endfunction(gp_item_default_embedded_path_override)

# -- Copy the App bundle to the installation location first
EXECUTE_PROCESS(COMMAND "@OSX_MAKE_STANDALONE_BUNDLE_BASH_SCRIPT@")

file(GLOB_RECURSE pluginList "$ENV{DESTDIR}/Applications/${OSX_App}/Contents/lib/avogadro/*.so")

file(GLOB obList "$ENV{DESTDIR}/Applications/${OSX_App}/Contents/lib/openbabel/*")
file(GLOB_RECURSE qtPluginList "$ENV{DESTDIR}/Applications/${OSX_App}/Contents/plugins/*.dylib")

message(STATUS "PluginList: ${qtPluginList}")

# -- Run the BundleUtilities cmake code
include(BundleUtilities)
fixup_bundle("$ENV{DESTDIR}/Applications/${OSX_App}"
  "${pluginList};${obList};${qtPluginList}"
  "@LIB_INSTALL_DIR@;@LIB_INSTALL_DIR@/avogadro/tools;@LIB_INSTALL_DIR@/avogadro/engines;@LIB_INSTALL_DIR@/avogadro/colors;@LIB_INSTALL_DIR@/avogadro/extensions;$ENV{DESTDIR}/Applications/${OSX_App}/Contents/plugins/accessible;$ENV{DESTDIR}/Applications/${OSX_App}/Contents/plugins/designer;$ENV{DESTDIR}/Applications/${OSX_App}/Contents/plugins/iconengines;$ENV{DESTDIR}/Applications/${OSX_App}/Contents/plugins/phonon_backend;$ENV{DESTDIR}/Applications/${OSX_App}/Contents/plugins/sqldrivers;$ENV{DESTDIR}/Applications/${OSX_App}/Contents/plugins/codecs;$ENV{DESTDIR}/Applications/${OSX_App}/Contents/plugins/graphicssystems;$ENV{DESTDIR}/Applications/${OSX_App}/Contents/plugins/imageformats;$ENV{DESTDIR}/Applications/${OSX_App}/Contents/plugins/script")
